{"version":3,"sources":["assets/images/pavlo1.jpg","components/Header/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","header","className","src","pavlo1","alt","href","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,oC,kMC2C5BC,MAvCf,WACI,OACJ,yBAAKC,UAAU,eACX,4BAAQA,UAAU,UACd,yBAAKA,UAAU,aACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,QACX,wBAAIA,UAAU,cACV,wBAAIA,UAAU,mBACd,yBAAKC,IAAKC,IAAQF,UAAU,iBAAiBG,IAAI,WAEjD,wBAAIH,UAAU,mBACV,uBAAGA,UAAU,sBACZI,KAAK,mDADN,gBAKJ,wBAAIJ,UAAU,mBACV,uBAAGA,UAAU,oBACbI,KAAK,gCADL,gBAaZ,uBAAGJ,UAAU,gBAAgBI,KAAK,qBAAlC,0B,MCqBDC,MAlDf,WACE,OACE,yBAAKL,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,oDACwB,6BADxB,mBAKA,yEAGA,iDACA,uBACEA,UAAU,WACVI,KAAK,mDAFP,eAMA,uBACEJ,UAAU,WACVI,KAAK,gCAFP,aAMA,uBACEJ,UAAU,WACVI,KAAK,2CAFP,gDAMA,uBACEJ,UAAU,WACVI,KAAK,2CAFP,2BAMA,uBACEJ,UAAU,WACVI,KAAK,4CAFP,8CAMA,+DCtCYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c649691.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pavlo1.c25517ce.jpg\";","import React from 'react';\r\nimport pavlo1 from '../../assets/images/pavlo1.jpg';\r\nimport './Header.css' ;\r\n\r\nfunction header () {\r\n    return(\r\n<div className=\"header__div\">\r\n    <header className=\"header\">\r\n        <div className=\"container\">\r\n            <div className=\"header__top\">\r\n                <nav className=\"menu\">\r\n                    <ul className=\"menu__list\">\r\n                        <li className=\"menu__list-item\">\r\n                        <img src={pavlo1} className=\"menu__list-img\" alt=\"pavlo\" />\r\n                        </li>\r\n                        <li className=\"menu__list-item\">\r\n                            <a className=\"menu__list-linkedin\"\r\n                             href=\"https://www.linkedin.com/in/pavlo-pechenevskyi/\">\r\n                             My LinkedIn\r\n                             </a>\r\n                        </li>\r\n                        <li className=\"menu__list-item\">\r\n                            <a className=\"menu__list-github\" \r\n                            href=\"https://github.com/PechPavlo\">\r\n                            My Github\r\n                            </a>\r\n                        </li>\r\n                        {/* <li className=\"menu__list-item\">\r\n                            <a className=\"menu__list-link\" href=\"#\">link</a>\r\n                        </li>\r\n                        <li className=\"menu__list-item\">\r\n                            <a className=\"menu__list-link\" href=\"#\">link</a>\r\n                        </li> */}\r\n                    </ul>\r\n                </nav>\r\n                <a className=\"header__phone\" href=\"tel:+380506806838\">+38(050)680-68-38</a>\r\n            </div>\r\n        </div>\r\n    </header>\r\n</div>\r\n    );\r\n};\r\n\r\nexport default header;","import React from 'react';\nimport pavlo1 from '../assets/images/pavlo1.jpg';\nimport Header from './Header/Header';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <header className=\"App-header\">\n        <p>\n          Hey, there! I'm Pavlo!<br />\n          How's it going?\n          </p>\n        {/* <img src={pavlo1} className=\"App-logo\" alt=\"pavlo\" /> */}\n        <p>\n          Here will be my personal Website! (soon:-)\n        </p>\n        <h3>Some of my pages:</h3>\n        <a\n          className=\"App-link\"\n          href=\"https://www.linkedin.com/in/pavlo-pechenevskyi/\"\n        >\n          My LinkedIn\n        </a>\n        <a\n          className=\"App-link\"\n          href=\"https://github.com/PechPavlo\"\n        >\n          My Github\n        </a>\n        <a\n          className=\"App-link\"\n          href=\"https://pechpavlo.github.io/cappadocia/\"\n        >\n          Learn HTML & CSS by making \"Cappadocia\" page\n        </a>\n        <a\n          className=\"App-link\"\n          href=\"https://pechpavlo.github.io/HomeWork-9/\"\n        >\n          Homework in LemonSchool\n        </a>\n        <a\n          className=\"App-link\"\n          href=\"http://PechPavlo.github.io/movie-posters\"\n        >\n          Learning React by making movie-poster page\n        </a>\n        <p>Keep calm, and learn React!!!</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}